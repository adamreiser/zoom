{
  "name": "Zoom",
  "tagline": "A wrapper tool for ag/ack/grep/pt",
  "body": "# Zoom\r\n\r\n## Inspired by [sack](https://github.com/sampson-chen/sack)\r\n\r\n### Quickly open CLI search results in your favorite editor!\r\n\r\nDo you like to search through code using ag, ack, grep, or pt? Good!\r\nThis tool is for you! Zoom adds some convenience to ag/ack/grep/pt by\r\nallowing you to quickly open your search results in your editor of\r\nchoice. When looking at large code-bases, it can be a pain to have to\r\nscroll to find the filename of each result. Zoom prints a tag number\r\nin front of each result that ag/ack/grep/pt outputs. Then you can\r\nquickly open that tag number with Zoom to jump straight to the source.\r\nZoom is even persistent across all your sessions! You can search in\r\none terminal and jump to a tag in another terminal from any directory!\r\n\r\n## How to install\r\n\r\nOpen a terminal and run the following:\r\n\r\n```bash\r\n$ gem install ruby-zoom\r\n```\r\n\r\nOr install from source:\r\n\r\n```bash\r\n$ git clone https://gitlab.com/mjwhitta/zoom.git\r\n$ cd zoom\r\n$ bundle install && rake install\r\n```\r\n\r\n### Installation from Distro Packages\r\n\r\n#### User Packaged\r\n\r\n- ![logo](http://www.monitorix.org/imgs/archlinux.png \"arch logo\")\r\n  Arch Linux: via [AUR](https://aur.archlinux.org/packages/ruby-zoom)\r\n\r\n- Via Firef0x's Arch Linux Repository\r\n  (**[Guide](http://firef0x.github.io/archrepo.html)**)\r\n\r\n## Mac users\r\n\r\nIf using the grep operator, you need to install\r\n[homebrew](http://brew.sh) and then run the following commands before\r\nusing Zoom:\r\n\r\n```bash\r\n$ brew tap homebrew/dupes\r\n$ brew install grep\r\n$ mkdir -p ~/bin\r\n$ cd ~/bin\r\n$ ln -s $(which ggrep) grep\r\n$ echo \"export PATH=~/bin:$PATH\" >>~/.bashrc\r\n```\r\n\r\n## How to use\r\n\r\nYou can use Zoom basically the same way you use ag/ack/grep/pt. Try\r\nthe following command for more info:\r\n\r\n```bash\r\n$ z --help\r\n```\r\n\r\nIf you encounter any errors, most Zoom exceptions should be fixable by\r\nrunning:\r\n\r\n```bash\r\n$ z --rc\r\n```\r\n\r\n`WARNING: This resets all your settings!`\r\n\r\nIf you are still having issues, please create a [GitLab issue].\r\n\r\n[GitLab issue]: https://gitlab.com/mjwhitta/zoom/issues\r\n\r\n## Shortcuts\r\n\r\nZoom prefixes shortcut tags to ag/ack/grep/pt's search results! If you\r\nuse Zoom to search for \"ScoobyDoo\" in the Zoom source directory, you\r\nwould see something like the following:\r\n\r\n```\r\n$ z scoobydoo\r\nGemfile\r\n[1] 8: gem \"scoobydoo\"\r\n\r\nlib/zoom/profile/ack.rb\r\n[2] 4:        if ((o == \"ack\") && ScoobyDoo.where_are_you(\"ack-grep\"))\r\n\r\nlib/zoom/profile_manager.rb\r\n[3] 2: require \"scoobydoo\"\r\n[4] 24:             return op if (ScoobyDoo.where_are_you(op))\r\n[5] 33:             if (ScoobyDoo.where_are_you(op))\r\n\r\nlib/zoom/profile.rb\r\n[6] 2: require \"scoobydoo\"\r\n[7] 143:             op = ScoobyDoo.where_are_you(o)\r\n\r\nlib/zoom/wish/editor_wish.rb\r\n[8] 2: require \"scoobydoo\"\r\n[9] 20:         if (ScoobyDoo.where_are_you(args))\r\n\r\nlib/zoom/config.rb\r\n[10] 3: require \"scoobydoo\"\r\n[11] 68:             e = ScoobyDoo.where_are_you(ed)\r\n[12] 76:         e = ScoobyDoo.where_are_you(e)\r\n[13] 77:         e = ScoobyDoo.where_are_you(\"vi\") if (e.nil?)\r\n\r\nzoom.gemspec\r\n[14] 33:   s.add_runtime_dependency(\"scoobydoo\", \"~> 0.1\", \">= 0.1.4\")\r\n```\r\n\r\nNow you can jump to result 7 with the following commands:\r\n\r\n```bash\r\n$ z --go 7\r\n```\r\n\r\nIf you're using Vim as your editor, then you can use `<leader>z` to\r\nopen the quickfix window, which will contain a list of the tags you\r\nspecified. You can also use `zn` to go to the next tag and `zp` to go\r\nto the previous.\r\n\r\n### Persistent shortcuts\r\n\r\nWhen you perform a search with Zoom, all results are cached. Using the\r\nfollowing commands will allow you to see the previous search results\r\nagain:\r\n\r\n```bash\r\n$ z --cache\r\n```\r\n\r\nThis means your tags/shortcuts are persistent across all sessions. You\r\ncan use other terminals to view your search results or to open them in\r\nan editor.\r\n\r\n## Profiles\r\n\r\nProfiles allow you to create shortcuts to your favorite commands. Some\r\nprofiles are created for you when you first run Zoom. Use the\r\nfollowing command to list your profiles:\r\n\r\n```bash\r\n$ z --list\r\n```\r\n\r\nThese profiles do not need to be limited to ag/ack/grep/pt shortcuts.\r\n\r\nNote: The `find` profile is \"special\" and should return a list of\r\nfiles.\r\n\r\n### Custom profile classes\r\n\r\nIf you want to create your own custom profile classes, you can simply\r\ndefine your classes in `~/.config/zoom/`:\r\n\r\n```ruby\r\n# list_profile.rb\r\n\r\nclass ListProfile < Zoom::Profile\r\n    # You can redefine this method if you want, or leave it out to\r\n    # accept the default functionality.\r\n    # def exe(args, pattern)\r\n    # end\r\n\r\n    def initialize(\r\n        name = nil,\r\n        operator = nil,\r\n        flags = nil,\r\n        before = nil, # Env vars, such as PATH\r\n        after = nil # Follow up commands or redirection\r\n    )\r\n        after ||= \"2>/dev/null\"\r\n        flags ||= \"--color -AFhl\"\r\n        operator ||= \"ls\"\r\n        super(name, operator, flags, before, after)\r\n        @taggable = false # Don't tag results (defaults to false)\r\n    end\r\nend\r\n```\r\n\r\n```ruby\r\n# hello_profile.rb\r\n\r\nclass HelloProfile < Zoom::Profile\r\n    def initialize(\r\n        name = nil,\r\n        operator = nil,\r\n        flags = nil,\r\n        before = nil, # Env vars, such as PATH\r\n        after = nil # Follow up commands or redirection\r\n    )\r\n        after ||= \"Hello world!\"\r\n        operator ||= \"echo\"\r\n        super(name, operator, flags, before, after)\r\n        @taggable = false # Don't tag results (defaults to false)\r\n    end\r\nend\r\n```\r\n\r\n```ruby\r\n# search_profile.rb\r\n\r\nclass SearchProfile < Zoom::Profile\r\n    def initialize(\r\n        name = nil,\r\n        operator = nil,\r\n        flags = nil,\r\n        before = nil, # Env vars, such as PATH\r\n        after = nil # Follow up commands or redirection\r\n    )\r\n        flags ||= \"--case-insensitive\"\r\n        operator ||= \"some_search_tool\"\r\n        super(name, operator, flags, before, after)\r\n        @format_flags = \"--color=never -EHInRs\" # Mirror grep output\r\n        @taggable = true\r\n    end\r\n\r\n    def translate(from)\r\n        to = Array.new\r\n        from.each do |flag, value|\r\n            case flag\r\n                when \"ignore\"\r\n                    # Translate to ignore flag for this operator\r\n                    to.push(\"--ignore=#{value}\")\r\n                when \"word-regexp\"\r\n                    # Translate to word-regexp flag for this operator\r\n                    to.push(\"-w\")\r\n            end\r\n        end\r\n        return to.join(\" \")\r\n    end\r\nend\r\n```\r\n\r\n```ruby\r\n# sec_profile.rb\r\n\r\nclass SecProfile < Zoom::SecurityProfile\r\n    def initialize(\r\n        name = nil,\r\n        operator = nil,\r\n        flags = nil,\r\n        before = nil, # Env vars, such as PATH\r\n        after = nil # Follow up commands or redirection\r\n    )\r\n        # Only need the case statement if you don't want the default\r\n        # flags\r\n        case Zoom::ProfileManager.default_profile\r\n            when /^ack(-grep)?$/\r\n                flags ||= \"ack_flags_here\"\r\n            when \"ag\"\r\n                flags ||= \"ag_flags_here\"\r\n            when \"grep\"\r\n                flags ||= \"grep_flags_here\"\r\n            when \"pt\"\r\n                flags ||= \"pt_flags_here\"\r\n        end\r\n        super(name, nil, flags, before, after)\r\n        @taggable = true\r\n    end\r\nend\r\n```\r\n\r\n## Convenient symlinks\r\n\r\nIf you find it tedious to use Zoom with the flags, there are currently\r\n5 convience symlinks that are supported.\r\n\r\n- `zc` is the same as `z --cache` or `z -c`\r\n- `zf` is the same as `z --find`\r\n- `zg` is the same as `z --go` or `z -g`\r\n- `zl` is the same as `z --list` or `z -l`\r\n- `zr` is the same as `z --repeat` or `z -r`\r\n\r\nYou can also symlink zoom to a profile name in order to quickly\r\nexecute favorite profiles.\r\n\r\n```bash\r\n$ cd ~/bin\r\n$ ln -s z test\r\n$ ./test # same as 'z --use test'\r\n```\r\n\r\n## Interested in security?\r\n\r\nZoom allows to you create profiles for commands other than\r\nag/ack/grep/pt. This may make Zoom a friendly tool for Penetration\r\nTesters or Security Researchers who are looking for a simple way to\r\nstore exploits. I've included some example profiles for searching for\r\nhard-coded passwords or unsafe C/Java/Javascript/PHP/Python code.\r\nThese profiles are not created by default with `z --rc`. To create\r\nthem run `z --secprofs`.\r\n\r\nThese profiles have a hard-coded pattern so if you want to change the\r\nregex used, you can run the following command to change the code:\r\n\r\n```bash\r\n$ gem open ruby-zoom\r\n```\r\n\r\nNavigate to `lib/zoom/profile` directory and select a profile to make\r\nchanges. If you want the revert your changes, run the following\r\ncommand:\r\n\r\n```bash\r\n$ gem pristine ruby-zoom\r\n```\r\n\r\n## Supported editors\r\n\r\nZoom currently works with:\r\n\r\n- vim (provides the best zoom experience)\r\n- emacs\r\n- nano\r\n- pico\r\n- jpico\r\n- any editor with `+LINE` as an option in it's man page\r\n\r\n## What is [ag](https://github.com/ggreer/the_silver_searcher)?\r\n\r\nag is a faster version of ack!\r\n\r\n## What is [ack](http://betterthangrep.com)?\r\n\r\nack is the replacement for grep!\r\n\r\n## What is [pt](https://github.com/monochromegane/the_platinum_searcher)?\r\n\r\npt is a code search tool similar to ack and ag!\r\n\r\n## What is [grep](http://en.wikipedia.org/wiki/Grep)?\r\n\r\nIf you don't know what grep is, this probably isn't the tool for you.\r\nYou should learn how to properly use grep before using a tool such as\r\nZoom which attempts to streamline the process for you.\r\n\r\n## ZSH completion function\r\n\r\nFor some simple zsh completion with Zoom, you can add the following to\r\nyour `~/.zshrc`:\r\n\r\n```bash\r\ncompdef _gnu_generic z zc zf zg zl zr\r\n```\r\n\r\n## Links\r\n\r\n- [Homepage](https://mjwhitta.github.io/zoom)\r\n- [Source](https://gitlab.com/mjwhitta/zoom)\r\n- [Mirror](https://github.com/mjwhitta/zoom)\r\n- [RubyGems](https://rubygems.org/gems/ruby-zoom)",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}